{"version":3,"sources":["components/Main/Category.js","components/Main/Main.js","App.js","components/OAuth/Login.js","components/Raffle/Unlotted.js","components/Raffle/Regist.js","components/Raffle/Raffle.js","Root.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","grid","height","background","disable","opacity","typography","color","areEqual","prevProps","nextProps","category","name","Category","onClick","classes","Grid","item","className","clsx","e","Typography","variant","key","transCategory","React","memo","Main","handleClick","container","direction","App","history","SetRaffle","useState","korean","western","china","japan","snack","setCategory","useEffect","cnt","chkCategory","push","Box","Container","maxWidth","Login","location","setAuthCode","match","raffle","query","queryString","parse","search","code","to","bottomGridContainer","padding","spacing","bottomGridItem","paper","Unlotted","unlotted","map","menu","xs","Paper","bottomBox","borderTop","marginLeft","marginRight","width","register","border","borderRadius","registerHeader","marginBottom","zIndex","registerBody","registerFooter","justifyContent","alignItems","textArea","resize","minHeight","lineHeight","registerButton","textTransform","registerTab","borderBottom","authUser","state","a","auth","createOAuthAppAuth","clientType","clientId","process","clientSecret","REACT_APP_CLIENT_SECRET","type","octokit","Octokit","uuidv4","Regist","authCode","registValue","setRegistValue","url","URL","params","client_id","Object","keys","forEach","searchParams","append","placeholder","onChange","target","value","Button","size","request","owner","repo","issue_number","body","href","topGridContainer","topGridItem","whiteText","raffleMenu","middleBox","overflow","getMenu","issueList","i_len","data","length","i","issue","title","number","comments","answer","Raffle","menus","setMenus","raffleResult","setRaffleResult","then","alert","justify","align","m_len","randomNum","Math","floor","random","Root","basename","exact","path","render","props","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f77e5cae.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Grid, makeStyles, Typography} from \"@material-ui/core\"\r\nimport clsx from \"clsx\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grid: {\r\n    height: `20vh`,\r\n    background: 'rgb(30, 34, 42)',\r\n    // 'background-image': \"url('/images/korean.jpg')\"\r\n  },\r\n  disable: {\r\n    opacity: 0.5\r\n  },\r\n  typography: {\r\n    color: `white`\r\n  }\r\n}))\r\n\r\nconst areEqual = (prevProps, nextProps) => {\r\n  return prevProps.category[prevProps.name] === nextProps.category[nextProps.name];\r\n}\r\n\r\nconst Category = ({category, onClick, name}) => {\r\n  const classes = useStyles()\r\n  // category 이름 번역\r\n  const transCategory = (key) => {\r\n    switch (key) {\r\n      case 'korean':\r\n        return '한식'\r\n      case 'western':\r\n        return '양식'\r\n      case 'china':\r\n        return '중식'\r\n      case 'japan':\r\n        return '일식'\r\n      case 'snack':\r\n        return '분식'\r\n      default:\r\n        return 'Error'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid item\r\n          className={clsx(classes.grid,{\r\n            [classes.disable]: !category[name]\r\n          })}\r\n          onClick={(e) => {\r\n            onClick(name)\r\n          }}\r\n    >\r\n      <Typography variant={`h5`}\r\n                  className={classes.typography}\r\n      >\r\n        {transCategory(name)}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default React.memo(Category, areEqual)\r\n","import React from 'react'\r\nimport Category from \"./Category\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\n\r\nconst Main = ({category, handleClick}) => {\r\n  return (\r\n    <Grid container\r\n          direction={`column`}\r\n    >\r\n      <Category category={category} name={`korean`} onClick={handleClick} />\r\n      <Category category={category} name={`western`} onClick={handleClick} />\r\n      <Category category={category} name={`china`} onClick={handleClick} />\r\n      <Category category={category} name={`japan`} onClick={handleClick} />\r\n      <Category category={category} name={`snack`} onClick={handleClick} />\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Main","import './App.css';\r\nimport {Box, Container} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\"\r\nimport Main from \"./components/Main/Main\"\r\n\r\nconst App = ({history, SetRaffle}) => {\r\n  // 활성화, 비활성화 토글 변수\r\n  const [category, setCategory] = useState(\r\n    {\r\n      korean: true,\r\n      western: true,\r\n      china: true,\r\n      japan: true,\r\n      snack: true\r\n    }\r\n  )\r\n  // 클릭하면 해당 카테고리 활성화 혹은 비활성화\r\n  const handleClick = (name) => {\r\n    setCategory(category => category = {...category, [name]: !category[name]})\r\n  }\r\n  // 활성화된 category가 한개면 true\r\n  const chkCategory = () => {\r\n    let cnt = 0;\r\n    for (const key in category) {\r\n      if (category[key]) cnt++\r\n    }\r\n    if (cnt > 1) {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    SetRaffle('china')\r\n    if (chkCategory()) {\r\n      history.push('/raffle/china')\r\n    } \r\n  })\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Box>\r\n        <Container maxWidth={`lg`}>\r\n          <Main category={category} handleClick={handleClick}></Main>\r\n        </Container>\r\n      </Box>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport queryString from 'query-string'\r\nimport {Link} from  'react-router-dom'\r\n\r\nconst Login = ({history, location, match, setAuthCode, raffle}) => {\r\n  const query = queryString.parse(location.search) // URL 파싱\r\n\r\n  React.useEffect(() => {\r\n    setAuthCode(query.code)\r\n  })\r\n\r\n  if (raffle !== '') {\r\n    history.push('/raffle/' + raffle)\r\n  }\r\n\r\n  return (\r\n    <Link to={'/'}>죄송합니다. GitHub 로그인 중에 에러가 발생했습니다. 클릭하시면 첫 화면으로 돌아갑니다.</Link>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport {Grid, makeStyles, Paper, Typography} from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  bottomGridContainer: {\r\n    height: '100%',\r\n    padding: theme.spacing(1)\r\n  },\r\n  bottomGridItem: {\r\n    padding: theme.spacing(1)\r\n  },\r\n  paper: {\r\n    height: '100%',\r\n    padding: theme.spacing(2),\r\n  }\r\n}))\r\n\r\nconst Unlotted = ({unlotted}) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <Grid container\r\n          className={classes.bottomGridContainer}\r\n    >\r\n      {unlotted.map(menu => {\r\n        return (\r\n          <Grid item\r\n                xs={3}\r\n                className={classes.bottomGridItem}\r\n                key={menu}\r\n          >\r\n            <Paper  className={classes.paper}\r\n                    variant={'outlined'}\r\n            >\r\n              <Typography>{menu}</Typography>\r\n            </Paper>\r\n          </Grid>\r\n        )\r\n      })}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Unlotted\r\n","import React from 'react'\r\nimport {Grid, makeStyles, Box, Button} from \"@material-ui/core\"\r\nimport {Octokit} from \"@octokit/core\"\r\nimport {v4 as uuidv4} from 'uuid'\r\nimport {createOAuthAppAuth} from  '@octokit/auth-oauth-app'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  bottomBox: {\r\n    height: '25vh',\r\n    background: 'rgb(30, 34, 42)',\r\n    borderTop: '1px solid rgb(201, 209, 217)',\r\n  },\r\n  bottomGridContainer: {\r\n    height: '100%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    width: '100%',\r\n    maxWidth: '760px',\r\n    padding: theme.spacing(2),\r\n  },\r\n  register: {\r\n    background: 'rgb(40, 44, 52)',\r\n    border: '1px solid rgb(201, 209, 217)',\r\n    borderRadius: '6px',\r\n  },\r\n  registerHeader: {\r\n    padding: '8px 8px 0',\r\n    marginBottom: '-1px',\r\n    zIndex: '1'\r\n  },\r\n  registerBody: {\r\n    background: 'rgb(30, 34, 42)',\r\n    padding: theme.spacing(1),\r\n    borderTop: '1px solid rgb(201, 209, 217)',\r\n  },\r\n  registerFooter: {\r\n    background: 'rgb(30, 34, 42)',\r\n    padding: '0 8px 8px',\r\n    justifyContent: 'flex-end',\r\n    alignItems: 'center',\r\n    borderRadius: '6px'\r\n  },\r\n  textArea: {\r\n    resize: 'vertical',\r\n    width: '100%',\r\n    minHeight: '90px',\r\n    padding: theme.spacing(1),\r\n    borderRadius: '6px',\r\n    lineHeight: '1.5'\r\n  },\r\n  registerButton: {\r\n    textTransform: 'none'\r\n  },\r\n  registerTab: {\r\n    padding: '8px 16px',\r\n    color: 'rgb(255, 255, 255)',\r\n    background: 'rgb(30, 34, 42)',\r\n    border: '1px solid rgb(201, 209, 217)',\r\n    borderBottom: '0',\r\n    borderRadius: '6px 6px 0 0',\r\n  }\r\n}))\r\n\r\nconst authUser = async (code, state) => {\r\n  const auth = createOAuthAppAuth({\r\n    clientType: 'oauth-app',\r\n    clientId: process.env.REACT_APP_CLIENT_ID,\r\n    clientSecret: process.env.REACT_APP_CLIENT_SECRET\r\n  })\r\n\r\n  const userAutentication = await auth({\r\n    type: 'oauth-user',\r\n    code: code,\r\n    state: state\r\n  })\r\n\r\n  // console.log(userAutentication)\r\n}\r\n\r\n// 인증\r\nconst octokit = new Octokit({\r\n  auth: process.env.REACT_APP_AUTH\r\n})\r\n\r\nlet issue_number = 0 // 현재 타겟이 되는 이슈의 번호\r\nconst state = uuidv4() // random String\r\n\r\nconst Regist = ({authCode}) => {\r\n  const [registValue, setRegistValue] = React.useState('') // 메뉴 등록 value\r\n  const classes = useStyles() // css\r\n  // code 발급 경로\r\n  const url = new URL('https://github.com/login/oauth/authorize')\r\n  const params = {\r\n    client_id: process.env.REACT_APP_CLIENT_ID,\r\n    state: state\r\n  }\r\n  Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\r\n  // 메뉴 등록\r\n  const registMenu = (value) => {\r\n    octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {\r\n      owner: 'wesbin',\r\n      repo: 'what-eat',\r\n      issue_number: issue_number,\r\n      body: value\r\n    })\r\n  }\r\n\r\n  if (authCode !== '') {\r\n    authUser(authCode, state)\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.bottomBox}>\r\n      <Grid container\r\n            className={classes.bottomGridContainer}\r\n      >\r\n        <Grid container\r\n              className={classes.register}\r\n        >\r\n          {/* Header #s */}\r\n          <Grid container\r\n                className={classes.registerHeader}\r\n                >\r\n            <Grid item\r\n                  className={classes.registerTab}\r\n                  >\r\n              메뉴\r\n            </Grid>\r\n          </Grid>\r\n          {/* Header #e */}\r\n          {/* Body #s */}\r\n          <Grid container\r\n                className={classes.registerBody}\r\n                >\r\n            <textarea className={classes.textArea}\r\n                      placeholder={'등록하고 싶은 메뉴를 적어주세요.'}\r\n                      onChange={(e) => {\r\n                        setRegistValue(e.target.value)\r\n                      }}\r\n                      />\r\n          </Grid>\r\n          {/* Body #s */}\r\n          {/* Footer #s */}\r\n          <Grid container\r\n                className={classes.registerFooter}\r\n                >\r\n            {\r\n              authCode !== '' ?\r\n              <Button variant={'contained'}\r\n              size={'small'}\r\n              className={classes.registerButton}\r\n              onClick={(e) => {\r\n                registMenu(registValue)\r\n              }}\r\n              >\r\n                등록\r\n              </Button>\r\n              :\r\n              <Button variant={'contained'}\r\n              size={'small'}\r\n              className={classes.registerButton}>\r\n                <a href={url}>GitHub 로그인</a>\r\n              </Button>\r\n            }\r\n          </Grid>\r\n          {/* Footer #e */}\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Regist\r\n","import React from 'react'\r\nimport {Grid, makeStyles, Box, Typography, Container} from \"@material-ui/core\"\r\nimport Unlotted from './Unlotted'\r\nimport {Octokit} from \"@octokit/core\"\r\n\r\nimport clsx from \"clsx\"\r\n\r\nimport Regist from './Regist'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  topGridContainer: {\r\n    height: '40vh',\r\n    background: 'rgb(30, 34, 42)',\r\n    padding: theme.spacing(2)\r\n  },\r\n  topGridItem: {\r\n    height: '100%',\r\n    padding: theme.spacing(8)\r\n  },\r\n  whiteText: {\r\n    color: 'rgb(255, 255, 255)',\r\n  },\r\n  raffleMenu: {\r\n    background: 'rgb(40, 44, 52)'\r\n  },\r\n  middleBox: {\r\n    height: '35vh',\r\n    background: 'rgb(30, 34, 42)',\r\n    borderTop: '1px solid rgb(201, 209, 217)',\r\n    overflow: 'scroll',\r\n  },\r\n}))\r\n\r\n// 인증\r\nconst octokit = new Octokit({\r\n  auth: process.env.REACT_APP_AUTH\r\n})\r\n// 현재 타겟이 되는 이슈의 번호\r\nlet issue_number = 0\r\n// 메뉴 가져오기\r\nconst getMenu = async (category) => {\r\n  // 이슈 가져오기\r\n  const issueList = await octokit.request('GET /repos/{owner}/{repo}/issues', {\r\n    owner: 'wesbin',\r\n    repo: 'what-eat'\r\n  })\r\n  // 현재 카테고리에 맞는 이슈의 번호 찾기\r\n  const i_len = issueList.data.length\r\n  for (let i = 0; i < i_len; i++) {\r\n    const issue = issueList.data[i]\r\n    if (issue.title === category) {\r\n      issue_number = issue.number\r\n    }\r\n  }\r\n  // 이슈 번호를 이용하여 코멘트 가져오기\r\n  if (issue_number === 0) {\r\n    return 0\r\n  } else {\r\n    const comments = await octokit.request(\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\", {\r\n      owner: 'wesbin',\r\n      repo: 'what-eat',\r\n      issue_number: issue_number\r\n    })\r\n    // 메뉴 이름 추출\r\n    const answer = []\r\n    comments.data.forEach(menu => answer.push(menu.body))\r\n\r\n    return answer\r\n  }\r\n}\r\n\r\nconst Raffle = ({authCode, match}) => {\r\n  const [menus, setMenus] = React.useState([]) // Git에서 불러온 전체 메뉴\r\n  const [raffleResult, setRaffleResult] = React.useState('') // 메뉴 추첨 결과\r\n  const category = match.params.category // 선택한 category\r\n  const classes = useStyles() // css\r\n  // Git에서 메뉴 불러와 세팅\r\n  React.useEffect(() => {\r\n    getMenu(category).then(answer => {\r\n      if (answer === 0) {\r\n        alert('Error')\r\n      } else {\r\n        setMenus(answer)\r\n      }\r\n    })\r\n  }, [])\r\n  // 메뉴 추첨\r\n  const raffleMenu = () => {\r\n    const m_len = menus.length\r\n    const randomNum = Math.floor(Math.random() * m_len) // 랜덤 변수\r\n    setRaffleResult(menus[randomNum])\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Container maxWidth={'lg'}>\r\n        {/* Top #s */}\r\n        <Grid container\r\n              className={classes.topGridContainer}\r\n              alignItems={'center'}\r\n              justify={'center'}\r\n        >\r\n          <Grid item\r\n                className={classes.topGridItem}\r\n                xs={12}\r\n          >\r\n            <Typography variant={'h2'}\r\n                        className={classes.whiteText}\r\n                        align={'left'}\r\n            >\r\n              오늘은\r\n            </Typography>\r\n            <Typography variant={'h2'}\r\n                        className={clsx(classes.whiteText, classes.raffleMenu)}\r\n                        align={'left'}\r\n                        onClick={(e) => {\r\n                          raffleMenu()\r\n                        }}\r\n            >\r\n              {raffleResult ? raffleResult : '이건'}\r\n            </Typography>\r\n            <Typography variant={'h2'}\r\n                        className={classes.whiteText}\r\n                        align={'left'}\r\n            >\r\n              어때요\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        {/* Top #e */}\r\n        {/* Middle #s */}\r\n        <Box  className={classes.middleBox}>\r\n          <Unlotted unlotted={menus}></Unlotted>\r\n        </Box>\r\n        {/* Middle #e */}\r\n        {/* Bottom #s */}\r\n        <Regist authCode={authCode}/>\r\n        {/* Bottom #e */}\r\n      </Container>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Raffle\r\n","import React from 'react'\r\nimport {BrowserRouter, Route, Switch} from  'react-router-dom'\r\nimport App from './App'\r\nimport Login from './components/OAuth/Login'\r\nimport Raffle from './components/Raffle/Raffle'\r\n\r\nconst Root = () => {\r\n\r\n  const [authCode, setAuthCode] = React.useState('')\r\n  const [raffle, SetRaffle] = React.useState('china')\r\n\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route  exact path=\"/\" \r\n                render={(props) => <App SetRaffle={SetRaffle} {...props}/>}/>\r\n        <Route  path=\"/login\" \r\n                render={(props) => <Login raffle={raffle} setAuthCode={setAuthCode} {...props}/>}/>\r\n        <Route  path=\"/raffle/:category\"\r\n                render={(props) => <Raffle authCode={authCode} {...props}/>}/>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default Root\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Root from './Root';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}